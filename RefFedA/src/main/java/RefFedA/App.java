/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package RefFedA;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map.Entry;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import RefFedA.Interaction.AggregateInteraction;
import RefFedA.Interaction.InteractionBuilder;
import de.fraunhofer.iosb.tc_lib.IVCT_LoggingFederateAmbassador;
import de.fraunhofer.iosb.tc_lib.IVCT_NullFederateAmbassador;
import de.fraunhofer.iosb.tc_lib.IVCT_RTIambassador;
import hla.rti1516e.CallbackModel;
import hla.rti1516e.InteractionClassHandle;
import hla.rti1516e.OrderType;
import hla.rti1516e.ParameterHandle;
import hla.rti1516e.ParameterHandleValueMap;
import hla.rti1516e.RTIambassador;
import hla.rti1516e.ResignAction;
import hla.rti1516e.RtiFactory;
import hla.rti1516e.RtiFactoryFactory;
import hla.rti1516e.TransportationTypeHandle;
import hla.rti1516e.encoding.DataElement;
import hla.rti1516e.encoding.DecoderException;
import hla.rti1516e.exceptions.AlreadyConnected;
import hla.rti1516e.exceptions.CallNotAllowedFromWithinCallback;
import hla.rti1516e.exceptions.ConnectionFailed;
import hla.rti1516e.exceptions.CouldNotCreateLogicalTimeFactory;
import hla.rti1516e.exceptions.CouldNotOpenFDD;
import hla.rti1516e.exceptions.ErrorReadingFDD;
import hla.rti1516e.exceptions.FederateAlreadyExecutionMember;
import hla.rti1516e.exceptions.FederateInternalError;
import hla.rti1516e.exceptions.FederateIsExecutionMember;
import hla.rti1516e.exceptions.FederateNameAlreadyInUse;
import hla.rti1516e.exceptions.FederateNotExecutionMember;
import hla.rti1516e.exceptions.FederateOwnsAttributes;
import hla.rti1516e.exceptions.FederateServiceInvocationsAreBeingReportedViaMOM;
import hla.rti1516e.exceptions.FederatesCurrentlyJoined;
import hla.rti1516e.exceptions.FederationExecutionAlreadyExists;
import hla.rti1516e.exceptions.FederationExecutionDoesNotExist;
import hla.rti1516e.exceptions.InconsistentFDD;
import hla.rti1516e.exceptions.InteractionClassNotDefined;
import hla.rti1516e.exceptions.InvalidInteractionClassHandle;
import hla.rti1516e.exceptions.InvalidLocalSettingsDesignator;
import hla.rti1516e.exceptions.InvalidResignAction;
import hla.rti1516e.exceptions.NameNotFound;
import hla.rti1516e.exceptions.NotConnected;
import hla.rti1516e.exceptions.OwnershipAcquisitionPending;
import hla.rti1516e.exceptions.RTIinternalError;
import hla.rti1516e.exceptions.RestoreInProgress;
import hla.rti1516e.exceptions.SaveInProgress;
import hla.rti1516e.exceptions.UnsupportedCallbackModel;

public class App extends IVCT_NullFederateAmbassador{

    protected String FEDERATION_NAME = "NETN-Test-Federation";
    protected String FEDERATE_NAME = "RefFedA";
    protected String FEDERATE_TYPE = "RefFed";
    
    public static final org.slf4j.Logger log = LoggerFactory.getLogger(App.class);
    private RTIambassador rtiAmbassador;
    private IVCT_LoggingFederateAmbassador loggingFederateAmbassador;
    private AggregateInteraction aggregate;

    private static String FOM_FILES = "";


    public App(Logger logger) throws RTIinternalError {
        super(logger);
        RtiFactory rtiFactory = RtiFactoryFactory.getRtiFactory();
        rtiAmbassador = new IVCT_RTIambassador (rtiFactory.getRtiAmbassador(), rtiFactory.getEncoderFactory(),log);
        loggingFederateAmbassador = new IVCT_LoggingFederateAmbassador(this, log);
    }
    
    public void connectToRti() throws InconsistentFDD, ErrorReadingFDD, CouldNotOpenFDD, NotConnected, RTIinternalError, MalformedURLException, CouldNotCreateLogicalTimeFactory, FederationExecutionDoesNotExist, SaveInProgress, RestoreInProgress, FederateAlreadyExecutionMember, CallNotAllowedFromWithinCallback, ConnectionFailed, InvalidLocalSettingsDesignator, UnsupportedCallbackModel, AlreadyConnected, FederateNameAlreadyInUse {
        ArrayList<URL> foms = new ArrayList<>();
        foms.add(new File(FOM_FILES + "/RPR-FOM-v2.0/RPR-Base_v2.0.xml").toURI().toURL());
        foms.add(new File(FOM_FILES + "/RPR-FOM-v2.0/RPR-Aggregate_v2.0.xml").toURI().toURL());
        foms.add(new File(FOM_FILES + "/NETN-FOM-v4.0/NETN-BASE.xml").toURI().toURL());
        foms.add(new File(FOM_FILES + "/NETN-FOM-v4.0/NETN-MRM.xml").toURI().toURL());
        foms.add(new File(FOM_FILES + "/TS-NETN-v4.0.xml").toURI().toURL());

        rtiAmbassador.connect(loggingFederateAmbassador, CallbackModel.HLA_IMMEDIATE);
        try {
            rtiAmbassador.createFederationExecution(FEDERATION_NAME, foms.toArray(new URL[foms.size()]));
        } catch (FederationExecutionAlreadyExists ignored) { }
        rtiAmbassador.joinFederationExecution(FEDERATE_NAME, FEDERATE_TYPE, FEDERATION_NAME);
    }
    
    public void setupDeclarations() throws NameNotFound, InvalidInteractionClassHandle, FederateNotExecutionMember, NotConnected, RTIinternalError, InteractionClassNotDefined, SaveInProgress, RestoreInProgress, FederateServiceInvocationsAreBeingReportedViaMOM {
        aggregate = new Interaction.AggregateBuilder(rtiAmbassador)
            .addEventId()
            .addFederate()
            .addRemoveSubunits()
            .addAggregateUnit()
            .build();

        aggregate.publish(rtiAmbassador);
        aggregate.subscribe(rtiAmbassador);
    }

    public void sendInteraction() throws Exception {
        aggregate.clear();
        aggregate.send(rtiAmbassador);

        aggregate.clear();
        aggregate.setValueEventId((byte) 0x01);
        aggregate.setValueFederate((short) 1);
        aggregate.send(rtiAmbassador);

        aggregate.clear();
        aggregate.setValueEventId((byte) 0x02);
        aggregate.setValueFederate((short) 2);
        aggregate.setValueAggregateUnit((byte) 0x02);
        aggregate.send(rtiAmbassador);

        aggregate.clear();
        aggregate.setValueEventId((byte) 0x03);
        aggregate.setValueFederate((short) 3);
        aggregate.setValueAggregateUnit((byte) 0x03);
        aggregate.setValueRemoveSubunits(1);
        aggregate.send(rtiAmbassador);
    }

    public void disconnectFromRti() throws FederateIsExecutionMember, CallNotAllowedFromWithinCallback, RTIinternalError, InvalidResignAction, OwnershipAcquisitionPending, FederateOwnsAttributes, FederateNotExecutionMember, NotConnected, FederationExecutionDoesNotExist {
        rtiAmbassador.resignFederationExecution(ResignAction.DELETE_OBJECTS);
        try {
            rtiAmbassador.destroyFederationExecution(FEDERATION_NAME);
        } catch (FederatesCurrentlyJoined ignored) {
            log.trace("leave federation open for remaining federates");
        }
        rtiAmbassador.disconnect();
    }

    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) throws Exception {
        int duration = 8000;
        int interval = 800;

        log.info("staring NETN reference federate A");
        App fed = new App(log);

        // get environment settings
        String name = System.getenv("federate");
        if (name != null) {
            fed.FEDERATE_NAME = name;
        }
        String durationString = System.getenv("duration");
        if (durationString != null) {
            duration = Integer.parseInt(durationString);
        }

        FOM_FILES = System.getenv("FOM_FILES");
        if (FOM_FILES == null) {
            FOM_FILES = "../foms";
        }

        fed.connectToRti();

        fed.setupDeclarations();

        while (duration > 0) {
//            fed.aggregate.setValueAggregateUnit((byte) 0x03);

            fed.sendInteraction();
            try {
                Thread.sleep(interval);
            } catch (InterruptedException e) {
                return;
            }
            duration -= interval;
            log.info("working - remaining time {} ms", duration);
        }

        fed.disconnectFromRti();

        log.info("terminate NETN reference federate A");
    }

        // 6.13
        @Override
        public void receiveInteraction(final InteractionClassHandle interactionClass, final ParameterHandleValueMap theParameters, final byte[] userSuppliedTag, final OrderType sentOrdering, final TransportationTypeHandle theTransport, final SupplementalReceiveInfo receiveInfo) throws FederateInternalError {
            log.warn("receiveInteraction not implemented");
            Interaction i = InteractionBuilder.parse(interactionClass, theParameters);
            log.warn("Interaction received {}", i.toString());
            ParameterHandleValueMap parameterMap = i.getParameters();
            for ( Entry<ParameterHandle, byte[]> entry : parameterMap.entrySet()) {
                DataElement data = Interaction.knownDataElements.get(entry.getKey());
                try {
                    data.decode(entry.getValue());
                } catch (DecoderException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
                String value = data.toString();
                log.info("Parameter: {} = {}", entry.getKey().toString(), entry.getValue().toString());
            }
        }
}
